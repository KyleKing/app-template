<h1 class="c-main__title">Comments</h1>
<p class="c-main__content">
  When submitting a comment, the new comment appears optimistically before being replaced by the server version to
  demonstrate more advanced UX with HTMX
</p>

<section class="c-comments" id="comments-demo">
  <form
    id="comment-form"
    class="c-comment-form"
    hx-post="/partials/comments"
    hx-target="#comments-list"
    hx-swap="afterbegin"
    hx-on::before-request="optimisticComment(this)"
    hx-on::after-request="clearForm(this)"
  >
    <fieldset>
      <legend>Add Comment</legend>
      <div class="c-field-row">
        <label for="author">Author Name</label>
        <input id="author" name="author" required maxlength="{{ MAX_AUTHOR_LEN }}" autocomplete="name" />
      </div>
      <div class="c-field-row">
        <label for="body">Comment</label>
        <textarea
          id="body"
          name="body"
          required
          rows="3"
          maxlength="{{ MAX_BODY_LEN }}"
          placeholder="Share your thoughts"
        ></textarea>
      </div>
      <input type="hidden" name="tempId" />
      <button type="submit">Post</button>
    </fieldset>
  </form>

  <ol id="comments-list" class="c-comments__list" hx-get="/partials/comments" hx-trigger="load" hx-swap="innerHTML">
  </ol>

  <template id="comment-item-template">
    {{ include "../partials/commentItem.vto" { comment: { id: "", author: "", createdAt: "", body: "" } } |> safe }}
  </template>
</section>

<script type="module" src="./public/shared/commentShape.js"></script>
<script type="module">
  import { escapeHtml, generateTempId, shapeCommentInput } from "./public/shared/commentShape.js"

  window.clearForm = function clearForm(form) {
    form.reset()
  }

  window.optimisticComment = function optimisticComment(form) {
    const fd = new FormData(form)
    const shaped = shapeCommentInput(fd)
    if (!shaped.body) return

    const tempId = generateTempId()
    const hidden = form.querySelector('input[name="tempId"]')
    if (hidden) hidden.value = tempId

    const tpl = document.getElementById("comment-item-template")
    if (!tpl) return

    const list = document.getElementById("comments-list")
    if (list) {
      const node = tpl.content.firstElementChild.cloneNode(true)
      node.classList.add("c-comment--optimistic")
      node.setAttribute("data-temp-id", tempId)
      node.querySelector('[data-field="author"]').textContent = escapeHtml(shaped.author)
      node.querySelector('[data-field="time"]').textContent = "(sendingâ€¦)"
      node.querySelector('[data-field="body"]').textContent = escapeHtml(shaped.body)
      list.prepend(node)
    }
  }

  document.body.addEventListener("htmx:afterSwap", (event) => {
    if (!event.detail.target || event.detail.target.id !== "comments-list") return
    event.detail.target.querySelectorAll(".c-comment[data-temp-id]").forEach((comment) => {
      const tempId = comment.getAttribute("data-temp-id")
      if (tempId) {
        const optimistic = document.querySelector(`.c-comment--optimistic[data-temp-id="${tempId}"]`)
        if (optimistic) optimistic.remove()
      }
    })
  })
</script>
